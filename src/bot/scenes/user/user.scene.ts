import { Action, Command, Ctx, Scene, SceneEnter } from 'nestjs-telegraf';
import { forwardRef, Inject, UseFilters } from '@nestjs/common';
import { BotService } from 'src/bot/bot.service';
import { Context, Markup } from 'telegraf';
import { SceneContext } from 'telegraf/typings/scenes';
import { RightsChangeService } from 'src/rights-change/rights-change.service';
import { UserService } from 'src/user/user.service';
import { UserRoleEnum } from 'src/user/enum/user-role.enum';
import { telegramDataHelper } from 'src/common/helpers/telegram-data.helper';
import { Types } from 'mongoose';
import { TicketStatus } from 'src/rights-change/rights-change.schema';
import { TelegrafExceptionFilter } from 'src/common/filtres/telegraf-exeption.filter';
import { MessageMode } from 'src/bot/enums/message-mode.enum';
import { WebAppRoutes } from 'src/bot/interfaces/webAppRoutes';

@Scene('userScene')
@UseFilters(TelegrafExceptionFilter)
export class UserScene {
  constructor(
    @Inject(forwardRef(() => BotService))
    private readonly botService: BotService,
    @Inject(forwardRef(() => UserService))
    private readonly userService: UserService,
    @Inject(forwardRef(() => RightsChangeService))
    private readonly rightsChangeService: RightsChangeService,
  ) {}

  @SceneEnter()
  async enter(@Ctx() ctx: Context & SceneContext) {
    const isOnlyUser = ctx.session['onlyUser'];
    const keyboardMarkup = Markup.keyboard([
      [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu')],
      [Markup.button.callback('–ü–æ–º–æ—â—å', 'help')],
      [Markup.button.callback('–í—ã–π—Ç–∏', 'changeRole')],
    ]).resize();

    !isOnlyUser &&
      (await ctx.reply('–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', keyboardMarkup));

    await this.menu(ctx, MessageMode.REPLY);
  }

  @Command('menu')
  async menuCommand(@Ctx() ctx: Context & SceneContext) {
    await this.menu(ctx, MessageMode.REPLY);
  }

  @Action('menu')
  async menu(@Ctx() ctx: Context & SceneContext, mode: MessageMode) {
    const markup = Markup.inlineKeyboard([
      [
        // Markup.button.callback('üì≤ –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥', 'generate_qr_code'),
        this.botService.getMarkupWebApp(
          'üì≤ –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥',
          WebAppRoutes.QR_GENERATE,
        ),
        this.botService.getMarkupWebApp(
          'üõí –ú–∞–≥–∞–∑–∏–Ω—ã - –ø–∞—Ä—Ç–Ω–µ—Ä—ã',
          WebAppRoutes.BUSINESS_LIST,
        ),
      ],
      // [
      //   Markup.button.callback('üí∞ –±–∞–ª–∞–Ω—Å', 'show_balance'),
      //   Markup.button.callback('üí≤ –¢–∞—Ä–∏—Ñ—ã', 'tariffs'),
      // ],
      [
        // Markup.button.callback('ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', 'partnership'),
        // Markup.button.url(
        //   'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        //   `https://t.me/${process.env.SUPPORT_USERNAME}`,
        // ),
      ],
      [Markup.button.callback('üë®‚Äçüíª –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', 'referral')],
      [this.botService.getMarkupWebApp('üßë‚Äçüíº –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'home')],
    ]);
    if (mode === MessageMode.REPLY) {
      await ctx.reply(
        '–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ –≤ –ê—Ä–≥–µ–Ω—Ç–∏–Ω–µ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏, —á–µ—Ä–µ–∑ Club de Amigos –ø—Ä—è–º–æ –≤ Telegram!',
        markup,
      );
    }
    if (mode === MessageMode.EDIT) {
      await ctx.editMessageText(
        `–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ –≤ –ê—Ä–≥–µ–Ω—Ç–∏–Ω–µ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏, —á–µ—Ä–µ–∑ Club de Amigos –ø—Ä—è–º–æ –≤ Telegram!`,
        markup,
      );
    }
  }

  @Action('callMenu')
  async callMenu(@Ctx() ctx: SceneContext) {
    await this.menu(ctx, MessageMode.EDIT);
  }

  @Action('partnership')
  async partnershipAction(@Ctx() ctx: SceneContext) {
    const user = await this.userService.findByTgId(ctx.callbackQuery.from.id);
    const isAdmin = user.role.includes(UserRoleEnum.ADMIN);
    const isPartner = user.role.includes(UserRoleEnum.PARTNER);
    const adminButton = isAdmin
      ? Markup.button.callback('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'isAdmin')
      : Markup.button.callback(
          '–ó–∞—è–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
          `createAdmin__${user.id}`,
        );

    const partnerButton = isPartner
      ? Markup.button.callback('‚úÖ –ü–∞—Ä—Ç–Ω–µ—Ä', 'isPartner')
      : Markup.button.callback('–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞', `createPartner__${user.id}`);

    const markup = Markup.inlineKeyboard([
      [adminButton],
      [partnerButton],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'callMenu')],
    ]);
    await ctx.editMessageText(
      '–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ',
      markup,
    );
  }

  @Action('isAdmin')
  async isAdmin(@Ctx() ctx: SceneContext) {
    const markup = Markup.inlineKeyboard([
      Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'partnership'),
    ]);
    await ctx.editMessageText('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚úÖ', markup);
  }

  @Action('isPartner')
  async isPartner(@Ctx() ctx: SceneContext) {
    const markup = Markup.inlineKeyboard([
      Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'partnership'),
    ]);
    await ctx.editMessageText('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º ‚úÖ', markup);
  }

  @Action(/createPartner/)
  async createPartnerTicket(@Ctx() ctx: SceneContext) {
    const userData = ctx.callbackQuery['data'] as string;
    const userId = telegramDataHelper(userData, '__');
    const userObjectId = new Types.ObjectId(userId);
    const markup = Markup.inlineKeyboard([
      Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'partnership'),
    ]);
    try {
      const isTicketExist = await this.rightsChangeService.findTicket(
        userId,
        UserRoleEnum.PARTNER,
        TicketStatus.PENDING,
      );
      if (isTicketExist) {
        await ctx.editMessageText(
          '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–µ–π—á–∞—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: üîÑ. –û–∂–∞–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
          markup,
        );
        return;
      }
    } catch (error) {
      await this.rightsChangeService.create({
        user: userObjectId,
        role: UserRoleEnum.PARTNER,
        status: TicketStatus.PENDING,
      });
      await ctx.editMessageText('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', markup);
    }
  }

  @Action('referral')
  async referral(@Ctx() ctx: SceneContext) {
    const markup = Markup.inlineKeyboard([
      Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'callMenu'),
    ]);

    await ctx.editMessageText(
      `–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 5% –æ—Ç –∏—Ö —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –±–∞–ª–∞–Ω—Å.\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/${ctx.botInfo.username}?start=refId=${ctx.from.id}`,
      markup,
    );
  }

  @Action(/createAdmin/)
  async createAdminTicket(@Ctx() ctx: SceneContext) {
    const userData = ctx.callbackQuery['data'] as string;
    const userId = telegramDataHelper(userData, '__');
    const userObjectId = new Types.ObjectId(userId);
    const markup = Markup.inlineKeyboard([
      Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'partnership'),
    ]);
    try {
      const isTicketExist = await this.rightsChangeService.findTicket(
        userId,
        UserRoleEnum.ADMIN,
        TicketStatus.PENDING,
      );
      if (isTicketExist) {
        await ctx.editMessageText(
          '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–µ–π—á–∞—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: üîÑ. –û–∂–∞–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
          markup,
        );
        return;
      }
    } catch (error) {
      await this.rightsChangeService.create({
        user: userObjectId,
        role: UserRoleEnum.ADMIN,
        status: TicketStatus.PENDING,
      });
      await ctx.editMessageText('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', markup);
    }
  }

  @Action('generate_qr_code')
  async generateQqCode(@Ctx() ctx: SceneContext) {
    return this.botService.generateCode(ctx, ctx.from.id);
  }

  @Action('show_balance')
  async showBalance(@Ctx() ctx: SceneContext) {
    const balanceAmount = await this.userService.showUserBalance(
      ctx.callbackQuery.from.id,
    );
    const markup = Markup.inlineKeyboard([
      [
        this.botService.getMarkupWebApp(
          'üí≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
          `${WebAppRoutes.USER_MY_PAYMENTS}?status=pending`,
        ),
      ],
      [
        this.botService.getMarkupWebApp(
          'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å',
          WebAppRoutes.USER_TOP_UP,
        ),
      ],
      [
        this.botService.getMarkupWebApp(
          'üìö –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–ª–Ω–µ–Ω–∏–π',
          WebAppRoutes.USER_MY_PAYMENTS,
        ),
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'callMenu')],
    ]);
    await ctx.editMessageText(
      `<b>–í–∞—à –∞–∫—Ç—É–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: </b> ${balanceAmount} USD $`,
      { ...markup, parse_mode: 'HTML' },
    );
  }
}
